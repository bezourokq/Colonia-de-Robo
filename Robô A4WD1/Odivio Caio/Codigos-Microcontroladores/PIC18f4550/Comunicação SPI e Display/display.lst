CCS PCH C Compiler, Version 4.074, 38112               11-Dec-14 10:51

               Filename: C:\Users\Odivio Caio\Desktop\Colonia-de-Robo\Robô A4WD1\Odivio Caio\Codigos-Microcontroladores\PIC18f4550\Comunicação SPI e Display\display.lst

               ROM used: 1258 bytes (4%)
                         Largest free fragment is 31506
               RAM used: 27 (1%) at main() level
                         52 (3%) worst case
               Stack:    11 worst case (4 in main + 7 for interrupts)

*
0000:  GOTO   0492
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  FF2.4
004E:  GOTO   0058
0052:  BTFSC  FF2.1
0054:  GOTO   00FE
0058:  BTFSS  F9D.3
005A:  GOTO   0064
005E:  BTFSC  F9E.3
0060:  GOTO   03A4
0064:  MOVFF  0F,00
0068:  MOVFF  10,01
006C:  MOVFF  11,02
0070:  MOVFF  12,03
0074:  MOVFF  13,04
0078:  BSF    0E.7
007A:  MOVFF  0D,FE9
007E:  MOVFF  08,FEA
0082:  MOVFF  09,FE1
0086:  MOVFF  0A,FE2
008A:  MOVFF  0B,FD9
008E:  MOVFF  0C,FDA
0092:  MOVFF  14,FF3
0096:  MOVFF  15,FF4
009A:  MOVFF  16,FFA
009E:  MOVF   05,W
00A0:  MOVFF  07,FE0
00A4:  MOVFF  06,FD8
00A8:  RETFIE 0
.................... /* Codigo desenvolvido por Odivio Caio, com a finalidade de efeturar  
.................... uma comunicação SPI entre um PIC18f4550 e o Microcontrolador do Robo A4WD1. 
.................... Foi ultilizado o CSS como IDE e seus proprios compiladores. 
.................... */ 
....................   
....................  
.................... #include <18F4550.H>  
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPROTECT, BROWNOUT, PUT, NOLVP  
.................... #fuses inths                                 
.................... #use delay(clock=20000000)     
*
01E6:  CLRF   FEA
01E8:  MOVLW  2B
01EA:  MOVWF  FE9
01EC:  MOVF   FEF,W
01EE:  BZ    020A
01F0:  MOVLW  06
01F2:  MOVWF  01
01F4:  CLRF   00
01F6:  DECFSZ 00,F
01F8:  BRA    01F6
01FA:  DECFSZ 01,F
01FC:  BRA    01F4
01FE:  MOVLW  7B
0200:  MOVWF  00
0202:  DECFSZ 00,F
0204:  BRA    0202
0206:  DECFSZ FEF,F
0208:  BRA    01F0
020A:  RETLW  00
.................... #include <flex_lcd.c> 
.................... // flex_lcd.c  
....................   
....................  // These pins are for the Microchip PicDem2-Plus board,  
....................  // which is what I used to test the driver.  Change these  
....................  // pins to fit your own board.  
....................   
....................  #define LCD_DB4   PIN_D4  
....................  #define LCD_DB5   PIN_D5 
....................  #define LCD_DB6   PIN_D6  
....................  #define LCD_DB7   PIN_D7  
....................   
....................  #define LCD_E     PIN_D3  
....................  #define LCD_RS    PIN_D1 
....................  #define LCD_RW    PIN_D2 
....................   
....................  // If you only want a 6-pin interface to your LCD, then  
....................  // connect the R/W pin on the LCD to ground, and comment  
....................  // out the following line.  
....................   
.................... #define USE_LCD_RW   1       
....................   
....................  //========================================  
....................   
....................  #define lcd_type 2      // 0=5x7, 1=5x10, 2=2 lines  
....................  #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................   
....................   
....................  int8 const LCD_INIT_STRING[4] =  
....................  {  
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................   0xc,                    // Display on  
....................   1,                      // Clear display  
....................   6                       // Increment cursor  
....................   };  
....................                                 
....................   
....................  //-------------------------------------  
....................  void lcd_send_nibble(int8 nibble)  
....................  {  
....................  // Note:  !! converts an integer expression  
....................  // to a boolean (1 or 0).  
....................   output_bit(LCD_DB4, !!(nibble & 1));  
*
0160:  BTFSC  32.0
0162:  BRA    0168
0164:  BCF    F8C.4
0166:  BRA    016A
0168:  BSF    F8C.4
016A:  BCF    F95.4
....................   output_bit(LCD_DB5, !!(nibble & 2));   
016C:  BTFSC  32.1
016E:  BRA    0174
0170:  BCF    F8C.5
0172:  BRA    0176
0174:  BSF    F8C.5
0176:  BCF    F95.5
....................   output_bit(LCD_DB6, !!(nibble & 4));     
0178:  BTFSC  32.2
017A:  BRA    0180
017C:  BCF    F8C.6
017E:  BRA    0182
0180:  BSF    F8C.6
0182:  BCF    F95.6
....................   output_bit(LCD_DB7, !!(nibble & 8));     
0184:  BTFSC  32.3
0186:  BRA    018C
0188:  BCF    F8C.7
018A:  BRA    018E
018C:  BSF    F8C.7
018E:  BCF    F95.7
....................   
....................   delay_cycles(1);  
0190:  NOP   
....................   output_high(LCD_E);  
0192:  BCF    F95.3
0194:  BSF    F8C.3
....................   delay_us(2);  
0196:  MOVLW  03
0198:  MOVWF  00
019A:  DECFSZ 00,F
019C:  BRA    019A
....................   output_low(LCD_E);  
019E:  BCF    F95.3
01A0:  BCF    F8C.3
....................  }  
01A2:  RETLW  00
....................   
....................  //-----------------------------------  
....................  // This sub-routine is only called by lcd_read_byte().  
....................  // It's not a stand-alone routine.  For example, the  
....................  // R/W signal is set high by lcd_read_byte() before  
....................  // this routine is called.       
....................   
....................  #ifdef USE_LCD_RW  
....................  int8 lcd_read_nibble(void)  
....................  {  
....................  int8 retval;  
....................  // Create bit variables so that we can easily set  
....................  // individual bits in the retval variable.  
....................  #bit retval_0 = retval.0  
....................  #bit retval_1 = retval.1  
....................  #bit retval_2 = retval.2  
....................  #bit retval_3 = retval.3  
....................   
....................  retval = 0;  
*
010C:  CLRF   33
....................       
....................  output_high(LCD_E);  
010E:  BCF    F95.3
0110:  BSF    F8C.3
....................  delay_cycles(1);  
0112:  NOP   
....................   
....................  retval_0 = input(LCD_DB4);  
0114:  BSF    F95.4
0116:  BCF    33.0
0118:  BTFSC  F83.4
011A:  BSF    33.0
....................  retval_1 = input(LCD_DB5);  
011C:  BSF    F95.5
011E:  BCF    33.1
0120:  BTFSC  F83.5
0122:  BSF    33.1
....................  retval_2 = input(LCD_DB6);  
0124:  BSF    F95.6
0126:  BCF    33.2
0128:  BTFSC  F83.6
012A:  BSF    33.2
....................  retval_3 = input(LCD_DB7);  
012C:  BSF    F95.7
012E:  BCF    33.3
0130:  BTFSC  F83.7
0132:  BSF    33.3
....................     
....................  output_low(LCD_E);  
0134:  BCF    F95.3
0136:  BCF    F8C.3
....................       
....................  return(retval);     
0138:  MOVFF  33,01
....................  }     
013C:  RETLW  00
....................  #endif  
....................   
....................  //---------------------------------------  
....................  // Read a byte from the LCD and return it.  
....................   
....................  #ifdef USE_LCD_RW  
....................  int8 lcd_read_byte(void)  
....................  {  
....................  int8 low;  
....................  int8 high;  
....................   
....................  output_high(LCD_RW);  
013E:  BCF    F95.2
0140:  BSF    F8C.2
....................  delay_cycles(1);  
0142:  NOP   
....................   
....................  high = lcd_read_nibble();  
0144:  RCALL  010C
0146:  MOVFF  01,32
....................   
....................  low = lcd_read_nibble();  
014A:  RCALL  010C
014C:  MOVFF  01,31
....................   
....................  return( (high<<4) | low);  
0150:  SWAPF  32,W
0152:  MOVWF  00
0154:  MOVLW  F0
0156:  ANDWF  00,F
0158:  MOVF   00,W
015A:  IORWF  31,W
015C:  MOVWF  01
....................  }  
015E:  RETLW  00
....................  #endif  
....................   
....................  //----------------------------------------  
....................  // Send a byte to the LCD.  
....................  void lcd_send_byte(int8 address, int8 n)  
....................  {  
....................  output_low(LCD_RS);  
*
01A4:  BCF    F95.1
01A6:  BCF    F8C.1
....................   
....................  #ifdef USE_LCD_RW  
....................  while(bit_test(lcd_read_byte(),7)) ;  
01A8:  RCALL  013E
01AA:  MOVFF  01,31
01AE:  BTFSC  01.7
01B0:  BRA    01A8
....................  #else  
....................  delay_us(60);   
....................  #endif  
....................   
....................  if(address)  
01B2:  MOVF   2F,F
01B4:  BZ    01BC
....................     output_high(LCD_RS);  
01B6:  BCF    F95.1
01B8:  BSF    F8C.1
....................  else  
01BA:  BRA    01C0
....................     output_low(LCD_RS);  
01BC:  BCF    F95.1
01BE:  BCF    F8C.1
....................         
....................   delay_cycles(1);  
01C0:  NOP   
....................   
....................  #ifdef USE_LCD_RW  
....................  output_low(LCD_RW);  
01C2:  BCF    F95.2
01C4:  BCF    F8C.2
....................  delay_cycles(1);  
01C6:  NOP   
....................  #endif  
....................   
....................  output_low(LCD_E);  
01C8:  BCF    F95.3
01CA:  BCF    F8C.3
....................   
....................  lcd_send_nibble(n >> 4);  
01CC:  SWAPF  30,W
01CE:  MOVWF  31
01D0:  MOVLW  0F
01D2:  ANDWF  31,F
01D4:  MOVFF  31,32
01D8:  RCALL  0160
....................  lcd_send_nibble(n & 0xf);  
01DA:  MOVF   30,W
01DC:  ANDLW  0F
01DE:  MOVWF  31
01E0:  MOVWF  32
01E2:  RCALL  0160
....................  }  
01E4:  RETLW  00
....................   
....................  //----------------------------  
....................  void lcd_init(void)  
....................  {  
....................  int8 i;  
....................   
....................  output_low(LCD_RS);  
*
03FE:  BCF    F95.1
0400:  BCF    F8C.1
....................   
....................  #ifdef USE_LCD_RW  
....................  output_low(LCD_RW);  
0402:  BCF    F95.2
0404:  BCF    F8C.2
....................  #endif  
....................   
....................  output_low(LCD_E);  
0406:  BCF    F95.3
0408:  BCF    F8C.3
040A:  CLRF   18
040C:  BTFSC  FF2.7
040E:  BSF    18.7
0410:  BCF    FF2.7
....................   
....................  delay_ms(15);  
0412:  MOVLW  0F
0414:  MOVWF  2B
0416:  RCALL  01E6
0418:  BTFSC  18.7
041A:  BSF    FF2.7
....................   
....................  for(i=0 ;i < 3; i++)  
041C:  CLRF   1B
041E:  MOVF   1B,W
0420:  SUBLW  02
0422:  BNC   044C
0424:  CLRF   18
0426:  BTFSC  FF2.7
0428:  BSF    18.7
042A:  BCF    FF2.7
....................     {  
....................      lcd_send_nibble(0x03);  
042C:  MOVLW  03
042E:  MOVWF  32
0430:  RCALL  0160
0432:  BTFSC  18.7
0434:  BSF    FF2.7
0436:  CLRF   18
0438:  BTFSC  FF2.7
043A:  BSF    18.7
043C:  BCF    FF2.7
....................      delay_ms(5);  
043E:  MOVLW  05
0440:  MOVWF  2B
0442:  RCALL  01E6
0444:  BTFSC  18.7
0446:  BSF    FF2.7
....................     }  
0448:  INCF   1B,F
044A:  BRA    041E
044C:  CLRF   18
044E:  BTFSC  FF2.7
0450:  BSF    18.7
0452:  BCF    FF2.7
....................   
....................  lcd_send_nibble(0x02);  
0454:  MOVLW  02
0456:  MOVWF  32
0458:  RCALL  0160
045A:  BTFSC  18.7
045C:  BSF    FF2.7
....................   
....................  for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
045E:  CLRF   1B
0460:  MOVF   1B,W
0462:  SUBLW  03
0464:  BNC   048E
....................     {  
....................      lcd_send_byte(0, LCD_INIT_STRING[i]);  
0466:  CLRF   03
0468:  MOVF   1B,W
046A:  MOVFF  FF2,1C
046E:  BCF    FF2.7
0470:  RCALL  00AA
0472:  BTFSC  1C.7
0474:  BSF    FF2.7
0476:  MOVWF  1D
0478:  CLRF   18
047A:  BTFSC  FF2.7
047C:  BSF    18.7
047E:  BCF    FF2.7
0480:  CLRF   2F
0482:  MOVWF  30
0484:  RCALL  01A4
0486:  BTFSC  18.7
0488:  BSF    FF2.7
....................       
....................      // If the R/W signal is not used, then  
....................      // the busy bit can't be polled.  One of  
....................      // the init commands takes longer than  
....................      // the hard-coded delay of 60 us, so in  
....................      // that case, lets just do a 5 ms delay  
....................      // after all four of them.  
....................      #ifndef USE_LCD_RW  
....................      delay_ms(5);  
....................      #endif  
....................     }  
048A:  INCF   1B,F
048C:  BRA    0460
....................   
....................  }  
048E:  GOTO   04B8 (RETURN)
....................   
....................  //----------------------------  
....................   
....................  void lcd_gotoxy(int8 x, int8 y)  
....................  {  
....................  int8 address;  
....................   
....................  if(y != 1)  
*
020C:  DECFSZ 2C,W
020E:  BRA    0212
0210:  BRA    0218
....................     address = lcd_line_two;  
0212:  MOVLW  40
0214:  MOVWF  2D
....................  else  
0216:  BRA    021A
....................     address=0;  
0218:  CLRF   2D
....................   
....................  address += x-1;  
021A:  MOVLW  01
021C:  SUBWF  2B,W
021E:  ADDWF  2D,F
....................  lcd_send_byte(0, 0x80 | address);  
0220:  MOVF   2D,W
0222:  IORLW  80
0224:  MOVWF  2E
0226:  CLRF   2F
0228:  MOVWF  30
022A:  RCALL  01A4
....................  }  
022C:  GOTO   0270 (RETURN)
....................   
....................  //-----------------------------  
....................  void lcd_putc(char c)  
....................  {  
....................   switch(c)  
....................     {  
0230:  MOVF   2A,W
0232:  XORLW  0C
0234:  BZ    0240
0236:  XORLW  06
0238:  BZ    0250
023A:  XORLW  02
023C:  BZ    025A
023E:  BRA    0264
....................      case '\f':  
....................        lcd_send_byte(0,1);  
0240:  CLRF   2F
0242:  MOVLW  01
0244:  MOVWF  30
0246:  RCALL  01A4
....................        delay_ms(2);  
0248:  MOVLW  02
024A:  MOVWF  2B
024C:  RCALL  01E6
....................        break;  
024E:  BRA    0270
....................       
....................      case '\n':  
....................         lcd_gotoxy(1,2);  
0250:  MOVLW  01
0252:  MOVWF  2B
0254:  MOVLW  02
0256:  MOVWF  2C
0258:  BRA    020C
....................         break;  
....................       
....................      case '\b':  
....................         lcd_send_byte(0,0x10);  
025A:  CLRF   2F
025C:  MOVLW  10
025E:  MOVWF  30
0260:  RCALL  01A4
....................         break;  
0262:  BRA    0270
....................       
....................      default:  
....................         lcd_send_byte(1,c);  
0264:  MOVLW  01
0266:  MOVWF  2F
0268:  MOVFF  2A,30
026C:  RCALL  01A4
....................         break;  
026E:  BRA    0270
....................     }  
....................  }  
0270:  RETLW  00
....................   
....................  //------------------------------  
....................  #ifdef USE_LCD_RW  
....................  char lcd_getc(int8 x, int8 y)  
....................  {  
....................  char value;  
....................   
....................  lcd_gotoxy(x,y);  
....................   
....................  // Wait until busy flag is low.  
....................  while(bit_test(lcd_read_byte(),7));   
....................   
....................  output_high(LCD_RS);  
....................  value = lcd_read_byte();  
....................  output_low(lcd_RS);  
....................   
....................  return(value);  
....................  }  
....................  #endif 
....................  
....................  
.................... int x = 0; //variavel onde será guardado o valor recebido. 
.................... int contador = 0;//contador do evento gerado pela interrupção externa. 
....................  
.................... #INT_EXT //Interrupção externa 
.................... void externa(void){ 
....................       if(input(PIN_B2)){ 
*
00FE:  BSF    F93.2
0100:  BTFSS  F81.2
0102:  BRA    0106
....................       contador++;  
0104:  INCF   1A,F
....................    } 
.................... } 
....................  
0106:  BCF    FF2.1
0108:  GOTO   0064
.................... #int_ssp //Interrupção do SPI 
.................... void ssp_isr(void){ 
....................    if(spi_data_is_in()) { 
*
03A4:  BTFSS  FC7.0
03A6:  BRA    03F8
....................          disable_interrupts(INT_SSP);  
03A8:  BCF    F9D.3
....................          x = spi_read();//Leitura do Valor recebido pela comunicação 
03AA:  MOVFF  FC9,19
....................          printf(lcd_putc, "\f Hex %x \n",x); //Escreve no display o valor recebido em Hexa 
03AE:  CLRF   23
03B0:  MOVF   23,W
03B2:  RCALL  00C8
03B4:  INCF   23,F
03B6:  MOVWF  00
03B8:  MOVWF  2A
03BA:  RCALL  0230
03BC:  MOVLW  06
03BE:  SUBWF  23,W
03C0:  BNZ   03B0
03C2:  MOVFF  19,24
03C6:  MOVLW  57
03C8:  MOVWF  25
03CA:  BRA    0272
03CC:  MOVLW  20
03CE:  MOVWF  2A
03D0:  RCALL  0230
03D2:  MOVLW  0A
03D4:  MOVWF  2A
03D6:  RCALL  0230
....................          printf(lcd_putc, "\Long1 %d",x); //Escreve no display o valor recebido em Long 
03D8:  CLRF   23
03DA:  MOVF   23,W
03DC:  RCALL  00E4
03DE:  INCF   23,F
03E0:  MOVWF  00
03E2:  MOVWF  2A
03E4:  RCALL  0230
03E6:  MOVLW  06
03E8:  SUBWF  23,W
03EA:  BNZ   03DA
03EC:  MOVFF  19,24
03F0:  MOVLW  1F
03F2:  MOVWF  25
03F4:  BRA    02DA
....................          enable_interrupts(INT_SSP);  
03F6:  BSF    F9D.3
....................       } 
.................... } 
....................  
03F8:  BCF    F9E.3
03FA:  GOTO   0064
.................... void main()  
.................... { 
*
0492:  CLRF   FF8
0494:  BCF    FD0.7
0496:  BSF    0D.7
0498:  CLRF   FEA
049A:  CLRF   FE9
049C:  MOVF   FC1,W
049E:  ANDLW  C0
04A0:  IORLW  0F
04A2:  MOVWF  FC1
04A4:  MOVLW  07
04A6:  MOVWF  FB4
04A8:  CLRF   19
04AA:  CLRF   1A
....................    output_low(PIN_A2); //Apaga LED_1 
04AC:  BCF    F92.2
04AE:  BCF    F89.2
....................    output_low(PIN_B2); //Apaga LED_2 
04B0:  BCF    F93.2
04B2:  BCF    F8A.2
....................    enable_interrupts(INT_EXT);//Ativação da interrupção externa       
04B4:  BSF    FF2.4
....................    lcd_init();//Inicialização da biblioteca para o uso do LCD 
04B6:  BRA    03FE
....................    enable_interrupts(INT_SSP);//Ativação da interrupção SPI  
04B8:  BSF    F9D.3
....................    enable_interrupts(GLOBAL); //Ativação da interrupção Global  
04BA:  MOVLW  C0
04BC:  IORWF  FF2,F
....................    setup_spi(spi_master | spi_l_to_h |SPI_SAMPLE_AT_END | SPI_SS_DISABLED); 
04BE:  BCF    FC6.5
04C0:  BCF    F94.7
04C2:  BSF    F93.0
04C4:  BCF    F93.1
04C6:  MOVLW  21
04C8:  MOVWF  FC6
04CA:  MOVLW  80
04CC:  MOVWF  FC7
04CE:  CLRF   18
04D0:  BTFSC  FF2.7
04D2:  BSF    18.7
04D4:  BCF    FF2.7
....................     
....................    while(1) 
....................    { 
....................    delay_ms(40); 
04D6:  MOVLW  28
04D8:  MOVWF  2B
04DA:  RCALL  01E6
04DC:  BTFSC  18.7
04DE:  BSF    FF2.7
....................    spi_write(15); 
04E0:  MOVF   FC9,W
04E2:  MOVLW  0F
04E4:  MOVWF  FC9
04E6:  RRCF   FC7,W
04E8:  BNC   04E6
....................   }  
04EA:  BRA    04CE
.................... } 
04EC:  SLEEP 

Configuration Fuses:
   Word  1: 0B00   NOIESO NOFCMEN INTHS PLL1 CPUDIV1 NOUSBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN RESERVED
   Word  3: 8300   PBADEN CCP2C1 MCLR NOLPT1OSC RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
